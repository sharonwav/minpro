// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())  
  email     String   @unique
  password  String 
  referralCode String
  isVerified Boolean @default(false)
  totalPoint Int 


  referralPoint RefferalPoint[]
  referralDiscount RefferalDiscount[]
  transaction Transaction[]
  review Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("users")
}

model Creator {
  id String @id @default(uuid())
  email String @unique
  password String

  banner String?
  logo String?
  url String?
  name String?
  phoneNumber Int?
  address String?
  aboutUs String?
  twitter String?
  instagram String?
  facebook String?

  event Event[]

  
  legalInfo LegalInfo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("creators")
}

model LegalInfo {
  id Int @id @default(autoincrement())
  idCardFile String?
  idCard String?
  name String?
  address String?

  creatorId String @unique
  creator Creator @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("legal_info")
}


model Event{
  id Int @id @default(autoincrement())
  name String
  image String @db.Text
  startDate DateTime @db.Date
  endDate DateTime @db.Date
  startTime DateTime @db.Time
  endTime DateTime @db.Time 
  location String
  address String?
  url String? 
  description String
  termsAndCondition String
  

  creatorId String
  creator Creator @relation(fields: [creatorId], references: [id])

  eventTicket EventTicket[]
  transaction Transaction[]
  review Review[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("events")
}

model EventTicket {
  id Int @id @default(autoincrement())
  ticketName String
  qty Int
  price Int?  
  ticketDescription String 
  ticketStartDate DateTime @db.Date
  ticketEndDate DateTime @db.Date
  ticketStartTime DateTime @db.Time
  ticketEndTime DateTime @db.Time

  eventId Int @default(0)
  event Event @relation(fields: [eventId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("event_tickets")
}

model Transaction {
  id Int @id @default(autoincrement())
  orderNumber String @unique @default(uuid())
  totalPrice Int
  midtrans_token String @default("")

  eventId Int 
  event Event @relation(fields: [eventId], references: [id]) 
  userId String 
  user User @relation(fields: [userId], references: [id])
   transactionStatusId Int    
  transactionStatus  TransactionStatus    @relation(fields: [transactionStatusId], references: [id])

  transactionDetail TransactionDetail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("transactions")
}

model TransactionDetail {
  id Int @id @default(autoincrement())
  price Int
  qty Int

  transactionId Int
  transaction Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("transaction_details")
}

model TransactionStatus {
  id Int @id @default(autoincrement())
  status String

  transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("transaction_status")
}

model RefferalPoint {
  id Int @id @default(autoincrement())
  point Int 
  expiry DateTime
  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("refferal_points")
}

model RefferalDiscount {
  id Int @id @default(autoincrement())
  discount Int
  expiry DateTime
  isUsed Boolean
  userId String
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("referral_discounts")
}

enum EventType {
  ONLINE
  OFFLINE
}

model Category{
  id Int @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("category")
}

model Review {
  comments String
  rating Int

  userId String
  user User @relation(fields: [userId], references: [id])
  eventId Int
  event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@map("reviews")
}
